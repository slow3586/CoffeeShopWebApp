name: drinkshop

x-logging: &logging
  driver: "json-file"

x-logging-none: &logging-none
  driver: "none"

x-healthcheck: &healthcheck
  interval: 5s
  timeout: 5s
  retries: 30
  start_period: 5s

x-spring-env: &spring-env
  management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
  JAVA_OPTS: -Xms64M -Xmx1200M
  SECRET_KEY: qweqweqweqweqweqweqweqweqweqweqrqwrqwrtweqtewqtweq
  app.client.customer: http://mainservice:8080/customer

services:
  nginx:
    image: nginx:1.27.0-alpine
    logging: *logging-none
    ports: [ "8085:80" ]
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'

  mainservice:
    build: ./mainservice
    logging: *logging
    depends_on:
      mainservicedb:
        condition: service_healthy
    environment:
      <<: *spring-env
      spring.datasource.url: 'jdbc:postgresql://mainservicedb:5432/postgres'
    expose: [ "8080" ]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  mainservicedb:
    image: postgres:alpine
    logging: *logging
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports: [ "5434:5432" ]
    command: >
      postgres 
      -c ssl=off
      -c wal_level=logical
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      <<: *healthcheck

  orderservicedb:
    image: postgres:alpine
    logging: *logging
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports: [ "5440:5432" ]
    command: >
      postgres 
      -c ssl=off
      -c wal_level=logical
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      <<: *healthcheck

  customerservicedb:
    image: postgres:alpine
    logging: *logging
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports: [ "5441:5432" ]
    command: >
      postgres 
      -c ssl=off
      -c wal_level=logical
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      <<: *healthcheck

  telegrambot:
    build: ./telegrambot
    logging: *logging
    environment:
      <<: *spring-env
      app.bot.token: 7166981536:AAG9J4o1hYRzoTLuL9bF63kQd8vZ9tKqFlo
      app.bot.name: Kam333555Bot
    expose: [ "8080" ]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  frontend:
    build: ./frontend
    logging: *logging
    environment:
      <<: *spring-env
    expose: [ "443" ]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  kafka-broker-0:
    image: confluentinc/cp-kafka:7.5.5
    ports: ["9091:9091", "9092:9092"]
    environment:
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-broker-0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka-broker-0:9091
      KAFKA_LISTENERS: BROKER://kafka-broker-0:9091, CONTROLLER://kafka-broker-0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.1
    restart: always
    ports: ["9090:9000"]
    environment:
      KAFKA_BROKERCONNECT: "kafka-broker-0:9091"
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:9000 || exit 1"
      <<: *healthcheck